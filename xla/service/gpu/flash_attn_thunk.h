/* Copyright 2023 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef XLA_SERVICE_GPU_FLASH_ATTN_THUNK_H_
#define XLA_SERVICE_GPU_FLASH_ATTN_THUNK_H_

#include "absl/status/status.h"
#include "xla/service/buffer_assignment.h"
#include "xla/service/gpu/gpu_flash_attn.h"
#include "xla/service/gpu/thunk.h"
#include "xla/stream_executor/stream_executor.h"

namespace xla {
namespace gpu {

// This class stores everything that StreamExecutor needs to launch a CUDA
// FlashAttention. It is generated by IrEmitter.
class FlashAttnFwdThunk : public Thunk {
 public:
  // Constructs a thunk for launching a CUDA FlashAttention.
  FlashAttnFwdThunk(
      ThunkInfo thunk_info, FlashAttnFwdConfig config,
      BufferAllocation::Slice query_slice, BufferAllocation::Slice key_slice,
      BufferAllocation::Slice value_slice,
      BufferAllocation::Slice cu_seqlens_query_slice /* may be null */,
      BufferAllocation::Slice cu_seqlens_key_slice /* may be null */,
      BufferAllocation::Slice output_slice,
      BufferAllocation::Slice softmax_lse_slice,
      BufferAllocation::Slice s_dmask_slice /* may be null */,
      BufferAllocation::Slice rng_state_slice,
      BufferAllocation::Slice alibi_slopes_slice /* may be null */,
      BufferAllocation::Slice softmax_lse_accum_slice /* may be null */,
      BufferAllocation::Slice output_accum_slice /* may be null */);

  FlashAttnFwdThunk(const FlashAttnFwdThunk &) = delete;
  FlashAttnFwdThunk &operator=(const FlashAttnFwdThunk &) = delete;

  absl::Status ExecuteOnStream(const ExecuteParams &params) override;

 private:
  BufferAllocation::Slice query_buffer_;              // input
  BufferAllocation::Slice key_buffer_;                // input
  BufferAllocation::Slice value_buffer_;              // input
  BufferAllocation::Slice output_buffer_;             // output
  BufferAllocation::Slice softmax_lse_buffer_;        // output
  BufferAllocation::Slice s_dmask_buffer_;            // output
  BufferAllocation::Slice rng_state_buffer_;          // output
  BufferAllocation::Slice alibi_slopes_buffer_;       // input
  BufferAllocation::Slice softmax_lse_accum_buffer_;  // input(temp)
  BufferAllocation::Slice output_accum_buffer_;       // input(temp)

  // Required by variable-length flash-attention
  BufferAllocation::Slice cu_seqlens_query_buffer_;  // input
  BufferAllocation::Slice cu_seqlens_key_buffer_;    // input

  // Flash-attention config
  const FlashAttnFwdConfig config_;
};

class FlashAttnBwdThunk : public Thunk {
 public:
  FlashAttnBwdThunk(
      ThunkInfo thunk_info, FlashAttnBwdConfig config,
      BufferAllocation::Slice grad_output_slice,
      BufferAllocation::Slice query_slice, BufferAllocation::Slice key_slice,
      BufferAllocation::Slice value_slice,
      BufferAllocation::Slice cu_seqlens_query_slice /* may be null */,
      BufferAllocation::Slice cu_seqlens_key_slice /* may be null */,
      BufferAllocation::Slice output_slice,
      BufferAllocation::Slice softmax_lse_slice,
      BufferAllocation::Slice rng_state_slice,
      BufferAllocation::Slice grad_query_slice,
      BufferAllocation::Slice grad_key_slice,
      BufferAllocation::Slice grad_value_slice,
      BufferAllocation::Slice grad_softmax_slice,
      BufferAllocation::Slice alibi_slopes_slice /* may be null */,
      BufferAllocation::Slice grad_query_accum_slice);

  FlashAttnBwdThunk(const FlashAttnBwdThunk &) = delete;
  FlashAttnBwdThunk &operator=(const FlashAttnBwdThunk &) = delete;

  absl::Status ExecuteOnStream(const ExecuteParams &params) override;

 private:
  BufferAllocation::Slice grad_output_buffer_;       // input
  BufferAllocation::Slice query_buffer_;             // input
  BufferAllocation::Slice key_buffer_;               // input
  BufferAllocation::Slice value_buffer_;             // input
  BufferAllocation::Slice output_buffer_;            // input
  BufferAllocation::Slice softmax_lse_buffer_;       // input
  BufferAllocation::Slice rng_state_buffer_;         // input
  BufferAllocation::Slice grad_query_buffer_;        // output
  BufferAllocation::Slice grad_key_buffer_;          // output
  BufferAllocation::Slice grad_value_buffer_;        // output
  BufferAllocation::Slice grad_softmax_buffer_;      // output
  BufferAllocation::Slice alibi_slopes_buffer_;      // input
  BufferAllocation::Slice grad_query_accum_buffer_;  // input(temp)

  // Required by variable-length flash-attention
  BufferAllocation::Slice cu_seqlens_query_buffer_;  // input
  BufferAllocation::Slice cu_seqlens_key_buffer_;    // input

  // Flash-attention config
  const FlashAttnBwdConfig config_;
};

}  // namespace gpu
}  // namespace xla

#endif  // XLA_SERVICE_GPU_FLASH_ATTN_THUNK_H_
